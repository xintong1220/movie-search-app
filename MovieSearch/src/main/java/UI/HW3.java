package UI;

/**
 * Created by xbao on 3/5/17.
 */
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class HW3 extends javax.swing.JFrame {

    private List<String> genSelected = new ArrayList<>();
    private List<String> countriesSelected = new ArrayList<>();
    private List<String> filmLocationsSelected = new ArrayList<>();
    private List<String> tagsSelected = new ArrayList<>();
    private List<String> mids = new ArrayList<>();

    boolean AndSwichOn = true;
    ArrayList<JCheckBox> Genrechecks;
    ArrayList<String> GenreCheckedString;
    String CountryCheckedString;
    ArrayList<JCheckBox> Countrychecks;
    ArrayList<JCheckBox> locationChecks;
    ArrayList<JCheckBox> tagChecks;
    String[] ActorList;
    int cntSelect = 0;
    Connection con = null;

    /**
     * Creates new form MainJFrame
     */
    public HW3() {
        initComponents();
        GenreSetupSQL();
//        UserSetup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        executebtn = new javax.swing.JButton();
        Text01 = new javax.swing.JButton();
        jComboBoxAndOr = new javax.swing.JComboBox<>();
        text02 = new javax.swing.JButton();
        text3 = new javax.swing.JButton();
        text4 = new javax.swing.JButton();
        text5 = new javax.swing.JButton();
        text6 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanelGenre = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanelCountry = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxRating = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxReviews = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jXDatePickerDstart = new org.jdesktop.swingx.JXDatePicker();
        jXDatePickerDend = new org.jdesktop.swingx.JXDatePicker();
        jComboBoxUrating = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        SQLstatement = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListActor = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jSpinnerRating = new javax.swing.JSpinner();
        jSpinnerReviews = new javax.swing.JSpinner();
        jSpinnerYstart = new javax.swing.JSpinner();
        jSpinnerYend = new javax.swing.JSpinner();
        jScrollPane7 = new javax.swing.JScrollPane();
        jListTags = new javax.swing.JPanel();
        jSpinnerUserRating = new javax.swing.JSpinner();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableResult = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closingForm(evt);
            }
        });

        executebtn.setText("Execute Query");
        executebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executebtnActionPerformed(evt);
            }
        });

        Text01.setText("Movie");

        jComboBoxAndOr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select AND, OR between attributes", "AND operation", "OR operation" }));
        jComboBoxAndOr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAndOrActionPerformed(evt);
            }
        });

        text02.setText("Genres");

        text3.setText("Country");

        text4.setText("Critics' Rating");

        text5.setText("Filming Location Country");

        text6.setText("Movie Tag Values");

        javax.swing.GroupLayout jPanelGenreLayout = new javax.swing.GroupLayout(jPanelGenre);
        jPanelGenre.setLayout(jPanelGenreLayout);
        jPanelGenreLayout.setHorizontalGroup(
                jPanelGenreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 209, Short.MAX_VALUE)
        );
        jPanelGenreLayout.setVerticalGroup(
                jPanelGenreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 336, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jPanelGenre);

        javax.swing.GroupLayout jPanelCountryLayout = new javax.swing.GroupLayout(jPanelCountry);
        jPanelCountry.setLayout(jPanelCountryLayout);
        jPanelCountryLayout.setHorizontalGroup(
                jPanelCountryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 175, Short.MAX_VALUE)
        );
        jPanelCountryLayout.setVerticalGroup(
                jPanelCountryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 319, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanelCountry);

        jLabel1.setText("Actor / Actress");

        jLabel3.setText("Rating:");

        jLabel4.setText("Value:");

        jComboBoxRating.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " = , < , > , <=, >=", "=", ">", "<", "<=", ">=" }));

        jLabel5.setText("<html>Num.of<br>Ratings:</html>");

        jComboBoxReviews.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " = , < , > , <=, >=", "=", ">", "<", "<=", ">=" }));

        jLabel6.setText("Value:");

        jLabel7.setText("From");

        jLabel8.setText("To");

        jLabel9.setText("User ID:");

        jLabel12.setText("Tag Weight:");

        jLabel13.setText("Value:");

        jComboBoxUrating.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "= , > , <", "=", ">", "<" }));

        SQLstatement.setColumns(20);
        SQLstatement.setRows(5);
        jScrollPane4.setViewportView(SQLstatement);

        jScrollPane5.setViewportView(jListActor);

        jScrollPane7.setViewportView(jListTags);

        jSpinnerUserRating.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));

        jTableResult.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null}
                },
                new String [] {
                        "title", "genres", "tags", "year", "country", "ratings", "num of reviews"
                }
        ) {
            boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableResult);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                                .addGap(4, 4, 4)
                                .addComponent(executebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(Text01, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jScrollPane2)
                                                        .addComponent(text02, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(text3, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                        .addComponent(jComboBoxAndOr, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
//                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(text5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
//                                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(0, 0, Short.MAX_VALUE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jComboBoxReviews, 0, 251, Short.MAX_VALUE)
                                                                        .addComponent(jSpinnerReviews)))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                )
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                )))
                                                .addGap(27, 27, 27)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel7)
                                                        .addComponent(jLabel8))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jXDatePickerDstart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jXDatePickerDend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(text4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                .addComponent(jLabel3)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jComboBoxRating, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(0, 0, Short.MAX_VALUE)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel4)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(jSpinnerRating, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(text6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel12)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(jComboBoxUrating, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel13)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(jSpinnerUserRating))
                                                                        .addGroup(layout.createSequentialGroup()
//                                                                                .addComponent(jLabel9)
                                                                                .addGap(0, 0, Short.MAX_VALUE)))
                                                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(Text01)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(text3)
                                                .addComponent(text5)
                                                .addComponent(text4)
                                                .addComponent(text6))
                                        .addComponent(text02))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane2)
                                                        .addComponent(jScrollPane1))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jComboBoxAndOr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(7, 7, 7)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                                                        .addComponent(jLabel1)
                                                        .addComponent(jLabel3)
                                                        .addComponent(jComboBoxRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                )
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(jSpinnerRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel4))
                                                                                .addGap(18, 18, 18)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(jComboBoxReviews, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                .addGap(18, 18, 18)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(jSpinnerReviews, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel6))))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(jXDatePickerDstart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel7))
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                )
                                                                                .addGap(18, 18, 18)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                )
                                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(jXDatePickerDend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel8))
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(jLabel12)
                                                                                        .addComponent(jComboBoxUrating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(jLabel13)
                                                                                        .addComponent(jSpinnerUserRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(0, 0, Short.MAX_VALUE)
                                                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        ))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(61, 61, 61)
                                                .addComponent(executebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(16, 16, 16)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void executebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executebtnActionPerformed
        String finalSql = "SELECT DISTINCT M.mid, g.genre, M.title, M.year, M.country,"
                + "TRUNC((M.rtAllCriticsRating + M.rtTopCriticsRating+ M.rtAudienceRating)/3,2) AS ratings,"
                + "TRUNC((M.rtAllCriticsNumReviews + M.rtTopCriticsNumReviews + M.rtAudienceNumRatings)/3,2) AS numberOfReviews FROM Movies M, Movie_genres g "
                + "where m.mid = g.mid ";
        String extra = "";
        if(generateGenresSql().length() > 0){
            extra += generateGenresSql();
        }
        if(generateCountriesSql().length() > 0){
            extra += extra.length() > 0? " INTERSECT " : "";
            extra += generateCountriesSql();
        }
        if(generateLocationSql().length() > 0){
            extra += extra.length() > 0? " INTERSECT " : "";
            extra += generateLocationSql();
        }
        if(generateTagsSql().length() > 0){
            extra += extra.length() > 0? " INTERSECT " : "";
            extra += generateTagsSql();
        }
        finalSql += "and m.mid in (" + extra + ")";

        if(jXDatePickerDstart.getDate() != null){
            String time = jXDatePickerDstart.getDate().toString();
            String year = time.substring(time.length() - 4);
            finalSql += " and M.year >= " + year;
        }
        if(jXDatePickerDend.getDate() != null){
            String time = jXDatePickerDend.getDate().toString();
            String year = time.substring(time.length() - 4);
            finalSql += " and M.year <=" + year;
        }

        // check rating
        if (jComboBoxRating.getSelectedIndex() != 0) {
            //System.out.println(jComboBoxRating.getSelectedItem());
            finalSql += " AND TRUNC((M.rtAllCriticsRating + M.rtTopCriticsRating+ M.rtAudienceRating)/3,2) "
                    + jComboBoxRating.getSelectedItem() + jSpinnerRating.getValue() + " ";
        }

        // check number of ratings
        if (jComboBoxReviews.getSelectedIndex() != 0) {
            //System.out.println(jComboBoxRating.getSelectedItem());
            finalSql = finalSql + "AND TRUNC((M.rtAllCriticsNumReviews + M.rtTopCriticsNumReviews + M.rtAudienceNumRatings)/3,2) "
                    + jComboBoxReviews.getSelectedItem() + jSpinnerReviews.getValue() + " ";
        }

        SQLstatement.setText(finalSql);
        String[] temp = SendSQL(finalSql);

        // put the result set into table
        DefaultTableModel dataModel = (DefaultTableModel) jTableResult.getModel();
        dataModel.setRowCount(0);
        int i = Integer.parseInt(temp[0]);
        Object[] rowdata = new Object[i];
        for (int j = 1; j < temp.length; j += i) {
            for (int k = 0; k < i; k++) {
                rowdata[k] = temp[j + k];
            }
            dataModel.addRow(rowdata);
        }
        System.out.println("result: " + (temp.length-1) / i);
        jTableResult.setModel(dataModel);


    }//GEN-LAST:event_executebtnActionPerformed

    private void jComboBoxAndOrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAndOrActionPerformed
        System.out.println(jComboBoxAndOr.getSelectedIndex());
        // true = > and
        // false = > or
        resetGenrechecks();
        if (jComboBoxAndOr.getSelectedIndex() == 1) {
            AndSwichOn = true;

        } else if (jComboBoxAndOr.getSelectedIndex() == 2) {
            AndSwichOn = false;
        }
    }//GEN-LAST:event_jComboBoxAndOrActionPerformed

    private void closingForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closingForm
        System.out.println("closing...");
        closeConnection(con);
    }//GEN-LAST:event_closingForm

    private void resetGenrechecks() {
        resetCountryDirectorActor();
        for (JCheckBox c : Genrechecks) {
            c.setSelected(false);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HW3().setVisible(true);
            }
        });
    }

    private void GenreSetupSQL() {

        ResultSet result = null;
        try {
            // connection
            System.out.println("Connecting...");
            if(con == null){
                con = openConnection();
            }

            // send query
            System.out.println("Send Query...");
            String query = "SELECT DISTINCT genre FROM movie_genres ORDER BY genre";
            result = searchAllTuples(con, query);

            //System.out.println("Show ResultSetMetaData...");
            //showMetaDataOfResultSet(result);
            String[] resultArray = showResultSet(result);
            GenreSetup(resultArray);

        } catch (SQLException e) {
            System.err.println("Error occurs when communicating with the database server" + e.getMessage());

        } catch (ClassNotFoundException e) {
            System.err.println("Cannot find the database driver");

        } catch (Exception e) {
            System.err.println("something wrong: " + e.getMessage());

        } finally {
            // close connection
            //System.out.println("Disconnecting...");
            //
        }
    }

    private void GenreSetup(String[] resultArray) throws Exception {
        Genrechecks = new ArrayList<>();
        jPanelGenre.setLayout(new BoxLayout(jPanelGenre, BoxLayout.Y_AXIS));
        for (int i = 1; i < resultArray.length; ++i) {
            JCheckBox tempcheckbox = new JCheckBox(resultArray[i]);

            tempcheckbox.addItemListener(new genreAndListener());

            Genrechecks.add(tempcheckbox);
            jPanelGenre.add(Genrechecks.get(i - 1));
        }
        jPanelGenre.revalidate();
        jPanelGenre.repaint();
    }

    private void tagsListSetup(String[] resultArray) {
//        String query = "SELECT DISTINCT T.value FROM Tags T";
//        String[] temp = SendSQL(query);
        tagChecks = new ArrayList<>();
        jListTags.setLayout(new BoxLayout(jListTags, BoxLayout.Y_AXIS));
        for (int i = 1; i < resultArray.length; ++i) {
            JCheckBox tempcheckbox = new JCheckBox(resultArray[i]);

            tempcheckbox.addItemListener(new TagsListener());

            tagChecks.add(tempcheckbox);
            jListTags.add(tagChecks.get(i - 1));
        }
        jListTags.revalidate();
        jListTags.repaint();
    }

    private void resetTagsList(){
        jListTags.revalidate();

        if(tagChecks != null){
            for(JCheckBox c : tagChecks){
                c.setSelected(false);
            }
        }
        jListTags.removeAll();
        jListTags.revalidate();
        jListTags.repaint();
    }

    private void resetCountryDirectorActor() {
        resetLocations();
        countriesSelected.clear();
        if(Countrychecks != null){
            for (JCheckBox c : Countrychecks) {
                c.setSelected(false);
            }
        }

        jPanelCountry.removeAll();
        jPanelCountry.revalidate();
        jPanelCountry.repaint();

//        jListActor.setListData(new String[0]);
    }

    private void resetLocations(){
        resetTagsList();
        filmLocationsSelected.clear();
        if(locationChecks != null){
            for(JCheckBox c : locationChecks){
                c.setSelected(false);
            }
        }
        jListActor.removeAll();
        jListActor.revalidate();
        jListActor.repaint();
    }

    private void locationSetup(String[] resultArray){
        //TODO
        locationChecks = new ArrayList<>();
        jListActor.setLayout(new BoxLayout(jListActor, BoxLayout.Y_AXIS));
        for (int i = 1; i < resultArray.length; ++i) {
            JCheckBox tempcheckbox = new JCheckBox(resultArray[i]);

            // change listener according to "and" "or"
            tempcheckbox.addItemListener(new LocationListener());

            // hide the null checkbox
            if (resultArray[i] == null) {
                tempcheckbox.setVisible(false);
            }
            locationChecks.add(tempcheckbox);
            jListActor.add(locationChecks.get(i - 1));
        }
        jListActor.revalidate();
        jListActor.repaint();
    }

    private void CountrySetup(String[] resultArray) {
        //TODO
        Countrychecks = new ArrayList<>();
        jPanelCountry.setLayout(new BoxLayout(jPanelCountry, BoxLayout.Y_AXIS));
        for (int i = 1; i < resultArray.length; ++i) {
            JCheckBox tempcheckbox = new JCheckBox(resultArray[i]);

            // change listener according to "and" "or"
            tempcheckbox.addItemListener(new countryAndListener());

            // hide the null checkbox
            if (resultArray[i] == null) {
                tempcheckbox.setVisible(false);
            }
            Countrychecks.add(tempcheckbox);
            jPanelCountry.add(Countrychecks.get(i - 1));
        }
        jPanelCountry.revalidate();
        jPanelCountry.repaint();
    }

    class genreAndListener implements ItemListener {

        @Override
        public void itemStateChanged(ItemEvent e) {
            //clear cache
            genSelected.clear();
            countriesSelected.clear();
            filmLocationsSelected.clear();
            mids.clear();

            resetCountryDirectorActor();

            for (int i = 0; i < Genrechecks.size(); ++i) {
                if (Genrechecks.get(i).isSelected()) {
                    genSelected.add(Genrechecks.get(i).getText());
                }
            }
            if(genSelected.size() <= 0){
                return;
            }

            String sqls = "";

            if(AndSwichOn){
                String subsql = "select distinct mid from movie_genres where genre = ";

                String connector = "INTERSECT ";

                for(String s : genSelected){
                    sqls += connector + subsql + "'" + s + "'";
                }

                sqls = sqls.substring(connector.length());
            } else{
                sqls = "select distinct mid from movie_genres where genre in ";
                StringBuilder condition = new StringBuilder();
                for(String s : genSelected){
                    condition.append(',').append('\'').append(s).append('\'');
                }
                sqls += "(" + condition.substring(1) + ")";
            }

            String[] mid = SendSQL(sqls);
            for(int i = 1; i < mid.length; ++i){
                mids.add(mid[i]);
            }

            StringBuilder finalSql = new StringBuilder("SELECT DISTINCT M.country FROM Movies M where M.mid in (");
            finalSql.append(sqls).append(")");
            String[] temp = SendSQL(finalSql.toString());
            CountrySetup(temp);
        }
    }

    private String generateCountriesSql(){
        if(countriesSelected.size() == 0){
            return "";
        }
        String sql = "select mid from movies where country in (";
        for(String s : countriesSelected){
            sql += "'" + s + "',";
        }
        sql = sql.substring(0, sql.length() - 1) + ")";
        return sql;
    }
    private String generateGenresSql(){
        String sqls = "";

        if(genSelected.size() == 0){
            return sqls;
        }

        if(AndSwichOn){
            String subsql = "select distinct mid from movie_genres where genre = ";

            String connector = " INTERSECT ";

            for(String s : genSelected){
                sqls += connector + subsql + "'" + s + "'";
            }

            sqls = sqls.substring(connector.length());
        } else{
            sqls = "select distinct mid from movie_genres where genre in ";
            StringBuilder condition = new StringBuilder();
            for(String s : genSelected){
                condition.append(',').append('\'').append(s).append('\'');
            }
            sqls += "(" + condition.substring(1) + ")";
        }
        return sqls;
    }
    private String generateLocationSql(){
        String sqls = "";

        if(filmLocationsSelected.size() == 0){
            return sqls;
        }

        if(AndSwichOn){
            String subsql = "select distinct mid from movie_location where location = ";

            String connector = " INTERSECT ";

            for(String s : filmLocationsSelected){
                sqls += connector + subsql + "'" + s + "'";
            }

            sqls = sqls.substring(connector.length());
        } else{
            sqls = "select distinct mid from movie_location where location in ";
            StringBuilder condition = new StringBuilder();
            for(String s : filmLocationsSelected){
                condition.append(',').append('\'').append(s).append('\'');
            }
            sqls += "(" + condition.substring(1) + ")";
        }
        return sqls;
    }
    private String generateTagsSql(){
        String sqls = "";

        if(tagsSelected.size() == 0){
            return sqls;
        }

        String extra = "";
        // check rating
        if (jComboBoxUrating.getSelectedIndex() != 0) {
            //System.out.println(jComboBoxRating.getSelectedItem());
            extra += " AND mt.TAGWEIGHT "
                    + jComboBoxUrating.getSelectedItem() + jSpinnerUserRating.getValue() + " ";
        }

        if(AndSwichOn){
            String subsql = "select distinct mid from movie_tags mt, tags t where mt.tid = t.tid and t.value = ";

            String connector = " INTERSECT ";

            for(String s : tagsSelected){
                sqls += connector + subsql + "'" + s + "'" + extra;
            }

            sqls = sqls.substring(connector.length());
        } else{
            sqls = "select distinct mid from movie_tags mt, tags t where mt.tid = t.tid and t.value in ";
            StringBuilder condition = new StringBuilder();
            for(String s : filmLocationsSelected){
                condition.append(',').append('\'').append(s).append('\'');
            }
            sqls += "(" + condition.substring(1) + ")" + extra;
        }
        return sqls;
    }

    class TagsListener implements ItemListener{
        @Override
        public void itemStateChanged(ItemEvent e){
            tagsSelected.clear();

            for (int i = 0; i < tagChecks.size(); ++i) {
                if (tagChecks.get(i).isSelected()) {
                    tagsSelected.add(tagChecks.get(i).getText());
                }
            }

            if(filmLocationsSelected.size() == 0){
                return;
            }
        }
    }

    class LocationListener implements ItemListener{
        @Override
        public void itemStateChanged(ItemEvent e){
            filmLocationsSelected.clear();
            resetTagsList();

            for (int i = 0; i < locationChecks.size(); ++i) {
                if (locationChecks.get(i).isSelected()) {
                    filmLocationsSelected.add(locationChecks.get(i).getText());
                }
            }

            if(filmLocationsSelected.size() == 0){
                return;
            }

            String tagsSql = "select value from tags t, movie_tags mt where t.tid = mt.tid and mt.mid in (";
            tagsSql += generateGenresSql() + " INTERSECT " + generateCountriesSql() + " INTERSECT " + generateLocationSql() + ")";
            String[] temp = SendSQL(tagsSql);
            tagsListSetup(temp);
        }
    }

    class countryAndListener implements ItemListener {

        @Override
        public void itemStateChanged(ItemEvent e) {
            //clear cache
            countriesSelected.clear();
            filmLocationsSelected.clear();
            resetLocations();

            if(e.getStateChange() == ItemEvent.SELECTED){
                if(AndSwichOn){
                    for (int i = 0; i < Countrychecks.size(); ++i) {
                        if (Countrychecks.get(i).isSelected()) {
                        } else {
                            Countrychecks.get(i).setVisible(false);
                        }
                    }
                }
            } else{
                if(AndSwichOn){
                    for (int i = 0; i < Countrychecks.size(); ++i) {
                        if (Countrychecks.get(i).getText() != "") {
                            Countrychecks.get(i).setVisible(true);
                        }
                    }
                }
            }
            for (int i = 0; i < Countrychecks.size(); ++i) {
                if (Countrychecks.get(i).isSelected()) {
                    countriesSelected.add(Countrychecks.get(i).getText());
                }
            }
            if(countriesSelected.size() <= 0 || genSelected.size() == 0)   return;
            String sql = "select distinct location from Movie_location where mid in (";

            sql += generateGenresSql() + "INTERSECT " + generateCountriesSql() + ")";
            String[] temp = SendSQL(sql);
            locationSetup(temp);

        }
    }

    private String[] SendSQL(String str) {
        ResultSet result = null;
        String[] resultArray = new String[1];
        try {
            // connection
            System.out.println("Connecting...");
            if(con ==null){
                con = openConnection();
            }

            // send query
            System.out.println("Send Query...");
            result = searchAllTuples(con, str);

            //System.out.println("Show ResultSetMetaData...");
            //showMetaDataOfResultSet(result);
            resultArray = showResultSet(result);

        } catch (SQLException e) {
            System.err.println("Error occurs when communicating with the database server" + e.getMessage());

        } catch (ClassNotFoundException e) {
            System.err.println("Cannot find the database driver");

        } catch (Exception e) {
            System.err.println("something wrong: " + e.getMessage());

        } finally {
            // close connection
            //System.out.println("Disconnecting...");
            //closeConnection(con);
        }
        return resultArray;
    }

    private ResultSet searchAllTuples(Connection con, String str) throws SQLException {
        Statement stmt = con.createStatement();
        return stmt.executeQuery(str);
    }

    private void showMetaDataOfResultSet(ResultSet result) throws SQLException {
        ResultSetMetaData meta = result.getMetaData();
        String message = "";

        for (int col = 1; col <= meta.getColumnCount(); col++) {
            message = message + "Column: " + meta.getColumnName(col)
                    + "\t, Type: " + meta.getColumnTypeName(col);
        }
        //resultTextField.setText(message);
    }

    private String[] showResultSet(ResultSet result) throws SQLException {
        ResultSetMetaData meta = result.getMetaData();

        ArrayList<String> array = new ArrayList<String>();
        array.add(String.valueOf(meta.getColumnCount()));
        while (result.next()) {
            for (int col = 1; col <= meta.getColumnCount(); col++) {
                array.add(result.getString(col));
            }
        }

        // resizing array
        // don't use resizing array
        // need to deal with null value
        /*
        String[] array = new String[2];
        array[0] = String.valueOf(meta.getColumnCount());
        int tupleCnt = 1;
        while (result.next()) {
            for (int col = 1; col <= meta.getColumnCount(); col++) {
                //
                if (array.length == tupleCnt) {
                    String[] temp = new String[2 * array.length];
                    for (int i = 0; i < array.length; ++i) {
                        temp[i] = array[i];
                    }
                    array = temp;
                }
                array[tupleCnt++] = result.getString(col);
            }
        }

        // move all the null value to the last
        int j = 0;
        String[] removeNullArray = new String[array.length];
        for (int i = 0; i < array.length; i++) {
            if (array[i] != null) {
                removeNullArray[j++] = array[i];
            }
        }
        // search for the first null position in an array
        for (j = 0; j < array.length - 1; j++) {
            if (removeNullArray[j] == null) {
                break;
            }
        }

        // return the array without null
        String[] temp = new String[j];
        for (int i = 0; i < j; ++i) {
            temp[i] = removeNullArray[i];
        }*/
        String[] temp = array.toArray(new String[0]);
        return temp;

    }

    private Connection openConnection() throws SQLException, ClassNotFoundException {
        //
        DriverManager.registerDriver(new oracle.jdbc.OracleDriver());

        //
        String host = "localhost";
        String port = "49161";
        String dbName = "xe";
        String userName = "system";
        String password = "oracle";

        //
        String dbURL = "jdbc:oracle:thin:@" + host + ":" + port + ":" + dbName;
        return DriverManager.getConnection(dbURL, userName, password);
    }

    private void closeConnection(Connection con) {
        try {
            con.close();
        } catch (SQLException e) {
            System.err.println("Cannot close Connection: " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea SQLstatement;
    private javax.swing.JButton Text01;
    private javax.swing.JButton executebtn;
    private javax.swing.JComboBox<String> jComboBoxAndOr;
    private javax.swing.JComboBox<String> jComboBoxRating;
    private javax.swing.JComboBox<String> jComboBoxReviews;
    private javax.swing.JComboBox<String> jComboBoxUrating;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
//    private javax.swing.JList<String> jListActor;
    private javax.swing.JPanel jListActor;
    private javax.swing.JPanel jListTags;
    private javax.swing.JPanel jPanelCountry;
    private javax.swing.JPanel jPanelGenre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSpinner jSpinnerRating;
    private javax.swing.JSpinner jSpinnerReviews;
    private javax.swing.JSpinner jSpinnerUserRating;
    private javax.swing.JSpinner jSpinnerYend;
    private javax.swing.JSpinner jSpinnerYstart;
    private javax.swing.JTable jTableResult;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerDend;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerDstart;
    private javax.swing.JButton text02;
    private javax.swing.JButton text3;
    private javax.swing.JButton text4;
    private javax.swing.JButton text5;
    private javax.swing.JButton text6;
    private javax.swing.JButton text7;
    // End of variables declaration//GEN-END:variables
}

